@using MenuComponentLibrary.Models
@page "/menu"

<li @onmouseenter="ToggleContainer" @onmouseleave="ToggleContainer" @onclick="OnClick" @key="Item.Text" class="@(IsRootItem ? "bl-root" : "")">
    <span class="bl-item">
        @Item.Text
        @if (Item.MenuItems != null)
        {
            <span class="bl-icon-container chevron @(IsRootItem ? Item.IsExpanded ? "top":"bottom" : Item.IsExpanded ? "left": "right")"></span>
        }
    </span>

    @if (Item.MenuItems != null && Item.IsExpanded)
    {
        <div class="submenu-container" style=@innerStyle>
            <ul>
                @foreach (var subItem in Item.MenuItems)
                {
                    <SubMenuComponent Item="subItem" IsRootItem="false"></SubMenuComponent>
                }
            </ul>
        </div>
    }
</li>

@code {
    [Parameter] 
    public MenuItem Item { get; set; }

    [Parameter] 
    public bool IsRootItem { get; set; }

    [Parameter]
    public EventCallback<MenuItem> OnClickCallback { get; set; }

    string? innerStyle;

    private async Task OnClick(EventArgs e) {
        await OnClickCallback.InvokeAsync(Item);
    }

    void ToggleContainer(MouseEventArgs e)
    {
        Item.IsExpanded = !Item.IsExpanded;

        if (!IsRootItem)
        {
            innerStyle = "left: 100%; top: 50%;";
        }
    }
}